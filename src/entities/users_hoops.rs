//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users_hoops")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub user_id: i32,
    pub hoop_id: i32,
    pub is_invited: bool,
    pub joined_at: i64,
    pub left_at: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::hoops::Entity",
        from = "Column::HoopId",
        to = "super::hoops::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Hoops,
}

impl Related<super::hoops::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Hoops.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
